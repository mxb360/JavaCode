java:
	SUN公司 开发

java核心优势：
	跨平台

java的各种版本：
	J2EE(JAVAEE):	定位在服务器端的应用
	J2SE(JAVASE):	定位在个人计算机上的应用
	J2ME(JAVAME):	定义在消费性电子产品的应用上


java 机制：
	1.虚拟机   
	2.垃圾回收机制

JDK： 
	Java Devleopment Kit   	   (java开发工具包）
JRE：
	Java Runtime Environment   (java运行环境）
JVM：
	Java Virtual Machine	   (java虚拟机）

开发只需要JDK  用户只需要JRE
JDK包含JRE     JRE包含JVM

jdk7新特性：

int integer = 0b0010010000110001001110000110;		可以表示二进制数
int integer = 12_1254_4512;				可以用下划线将数字隔开

/***********************************************************************/

java是强类型语言：

		每个变量都必须声明其类型

java数据类型：
		基本数据类型：
				数值型：
					整数型:
						byte[1字节](-128到 127) 
						short[2字节](约3万) 
						int[4字节]（约21亿）  
						long[8字节]（2的63次方）
					浮点型：
						float[4字节](3.4e38)  
						double[8字节](1.9e308)
				字符型:
					char[2字节](约6万字符 0到65535)
				布尔型：
					boolean[1位](true或false)

					

字符集：
	ASCII		美国信息交换标准代码，基于拉丁字母
	ISO8859-1	西欧字符集
	BIG5		台湾的大五码，表示繁体汉字
	CB2312		大陆使用最早的简体中文字符
	GBK		GB2312的扩展，可以表示繁体汉字
	GB18030		GBK的扩展，中国所有手持/嵌入式计算机系统的强制标准，可以表示中华民族字符
	Unicode		国际通用字符集
	UTF-8		万国马，针对Unicode的可变长字符编码
	UTF-16		大部分字符以固定的长度（2字节）表示，但不兼容ASCII编码
	UTF-32		对每个字符都使用4个字节


类：每一个java文件只能有一个 public 类

/*************************************************************************/

栈：自动分配连续空间 后进先出 放置：局部变量
堆：存放new出来的对象
方法区：类的信息（代码）、static变量、常量池等

构造器：
	又称为构造方法
	用于构造该类的事例
	通过new关键字调用
	构造器虽然有返回值，但不定义返回类型，不能使用return
	方法名要与类名相同
	若不加构造器，系统会自己添加一个无参的空的构造器。
	作用：构造该类的对象，经常也用来初始初始化对象的属性


/************************************************************************/


static关键字
作用：是一个修饰符，用于修饰成员(成员变量,成员方法)
1.被static 修饰后的成员变量只有一份
2.当成员被static修饰之后，多了一种访问方式,除了可以对象调用之外，还可以被类直接调用（类名.静态成员）

static的特点：
1.随着类的加载而被加载
2.优先于对象的存在
3.被所有的对象所共享的
4.可以直接被类名所调用

存放位置
类变量随着类的加载而存在于data内存区
实例变量随着对象的建立而存在于堆内存

生命周期：
1.类变量生命周期最长，随着类的消失而消失
2.实例变量生命比类变量短，它是随着对象的消失而消失

方法注意事项：
1.静态的方法只能访问静态的成员
2.非静态的方法既能访问静态的成员（成员变量，成员方法）也能访问非静态成员
3.静态的方法中是不可以定义this super关键字
因为静态优先于对象存在，所以静态方法不可以出现this

什么时候使用静态
static所修饰的内容是成员(成员变量，方法)
从两方面入手：
什么时候使用静态的成员变量：
当属于同一个类的所有对象出现共享数据时，
需要将存储这个共享数据的成员变量用static修饰

什么时候使用静态方法
当功能内部没有访问到非静态的成员时（对象特有的数据）
那么该功能可以定义成静态的

/*******************************************************************/
